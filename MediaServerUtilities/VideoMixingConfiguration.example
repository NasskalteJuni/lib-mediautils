const fourGrid = new VideoMixingConfiguration({
    applicable: streams => streams.length === 4,
    background: 'black',
    positions: [
        {
            x: 0,
            y: 0,
            width: this.width/2,
            height: this.height/2
        },
        {
            x: this.width/2,
            y: 0,
            width: this.width/2,
            height: this.height/2
        },
        {
            x: 0,
            y: this.height/2
            width: this.width/2,
            height: this.height/2
        },
        {
            x: this.width/2,
            y: this.height/2,
            width: this.width/2,
            height: this.height/2
        }
    ]
}});

// assume speakers is part of the outer scope and a reference is kept to it
const variableBySpeaker = new VideoMixingConfiguration({
    background: () => speakers.length > 0 ? 'rgb(50,50,50)' : 'rgb(20,20,20)';
    positions: (id, index) => {
        const padded = 10;
        const miniFrameWidth = 60;
        const miniFrameHeight = 60;
        if(speakers.length > 0 && id === speakers.length[0]){
            return {
                id,
                x: padded,
                y: padded,
                width: this.width-2*padded,
                height: this.height-2*padded - miniFrameHeight+2*padded
            }
        }else{
            return {
                id,
                x: 10 + (index * this.width),
                y: 10 + this.height-miniFrameHeight
                width: miniFrameWidth,
                height: miniFrameHeight
            }
        }
    }
});

showAlwaysId = new VideoMixingConfiguration({
    positions: [
        {
            id: idToShow
            x: 0,
            y: 0,
            width: this.width,
            height: this.height
        }
    ]
});

// do more variable, lower level stuff by accessing exposed canvas & context
customConfig = new VideoMixingConfiguration({
    paint: (id, context, canvas, video, index, arr) => {
        context.clearRect(0,0,canvas.width, canvas.height);
        context.drawImage(video,canvas.width*index,0,canvas.width/arr.length, canvas.height);
    }
});

// scaling grid example for factorable numbers of streams
// like 4 (2x2), 6 (2x3), 9 (3x3), 12 (3x4), 16 (4x4), 18 (3x6), 20 (4x5), etc
// in short, isFactorable = true when factors a, b of in -> a/b >= 0.66, false otherwise
grid = new VideoMixingConfiguration({
    applicable: streams => isFactorable(streams.length)
    positions: (id, index, arr) => {
        const columns = Math.max(factors(arr.length));
        const rows = arr.length/columns;
        return {
            x: index % columns,
            y: ~~(index / columns)
            width: this.width/columns,
            height: this.height/rows
        }
    }
});