<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title><%=title%></title>
    <link href="style.css" rel="stylesheet" type="text/css">
    <script src="bundle.min.js"></script>
</head>
<body>
<aside id="users">
</aside>
<main>
    <video id="display" autoplay></video>
    <button id="addMedia">Join Conference</button>
</main>
<script>
    function updateUserList(users){
        const container = document.getElementById("users");
        container.innerHTML = "";
        const ul = document.createElement("ul");
        users.forEach(u => {
            const li = document.createElement("li");
            li.innerText = u;
            ul.appendChild(li);
        })
        container.appendChild(ul);
    }

    function addSwitchButton(){
        const button = document.createElement('button');
        button.id = 'changearchitecture';
        button.innerText = 'change architecture (currently '+architecture+')';
        button.addEventListener('click', () => {
            const switchToArchitecture = architecture === 'mesh' ? 'mcu' : 'mesh';
            signaller.send(JSON.stringify({type: 'architecture:change', receiver: '@server', data: switchToArchitecture, sent: new Date().toISOString()}));
            console.log('architecture changed to '+architecture);
        });
        document.querySelector('main').appendChild(button);
    }
</script>
<script>
    const name = new URLSearchParams(location.search).get('user');
    let architecture = 'mesh';
    let cam = null;
    const verbose = true;
    const signaller = new WebSocket(location.origin.replace(/^http/,'ws'));
    const connections = new MediaUtilities.ConnectionManager({name, verbose, signaller});
    const mediaserver = new MediaUtilities.Connect({peer: '@mcu', verbose, signaller, isYielding: () => false});
    const videoMixer = new MediaUtilities.VideoMixer();
    videoMixer.addConfig(new MediaUtilities.VideoMixingConfigurations.Line(0, true), 'line');
    videoMixer.addConfig(new MediaUtilities.VideoMixingConfigurations.Grid(1, ids => [4,6,9].indexOf(ids.length)), 'grid');
    const audioMixer = new MediaUtilities.AudioMixer();
    const mixed = new MediaStream([videoMixer.outputTrack, audioMixer.outputTrack]);
    document.getElementById('display').srcObject = mixed;
    connections.addEventListener('userconnected', () => updateUserList(connections.users))
    connections.addEventListener('userdisconnected', () => updateUserList(connections.users));
    connections.addEventListener('streamadded', (stream, peer) => {
        console.log('add stream',stream,'of peer',peer,'to mixing process');
        videoMixer.addStream(stream, peer+'-'+stream.id);
        audioMixer.addStream(stream, peer+'-'+stream.id);
    })
    connections.addEventListener('streamremoved', (stream, peer) => {
        console.log('remove stream',stream,'of peer',peer,'from mixing process');
        videoMixer.removeStream(peer+'-'+stream.id);
        audioMixer.removeStream(peer+'-'+stream.id);
    })
    mediaserver.addEventListener('streamadded', (stream) => {
        display.srcObject = stream;
        if(display.paused) display.play();
    });
    signaller.addEventListener('message', e => {
        const msg = JSON.parse(e.data);
        if(msg.type === 'architecture:change'){
            console.log('received architecture update:', msg.data);
            // if we have for some reason the current architecture, do nothing
            if(msg.data === architecture) return;
            architecture = msg.data;
            if(document.getElementById('changearchitecture')) document.getElementById('changearchitecture').innerText = 'change architecture (currently '+architecture+')';
            // if we already use our webcam, switch the stream to the current architecture
            if(cam){
                if(architecture === 'mesh'){
                    connections.addMedia(cam);
                    mediaserver.removeMedia(cam);
                }else if(architecture === 'mcu'){
                    mediaserver.addMedia(cam);
                    connections.removeMedia(cam);
                }
            }
            // redirect the output. mesh is mixed locally, mediaserver remotely, add mixed stream to display
            if(architecture === 'mesh'){
                display.srcObject = mixed;
            }else if(architecture === 'mcu'){
                display.srcObject = mediaserver.streams[0];
            }
        }
    })
    const addMediaButton = document.getElementById("addMedia");
    addMediaButton.addEventListener("click", async () => {
        cam = await navigator.mediaDevices.getUserMedia({video: true, audio: true});
        if(architecture === 'mesh') connections.addMedia(cam);
        else if(architecture === 'mcu') mediaserver.addMedia(cam);
        addMediaButton.parentNode.removeChild(addMediaButton);
        // yeah, we have to make an autoplay-video play. If not muted, autoplay isn't allowed in chrome
        if(display.paused) display.play();
        addSwitchButton();
    });
    window.addEventListener('beforeunload', () => connections.close());
</script>
</body>
</html>